local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HeadModUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Toggle Button
local toggleButton = Instance.new("TextButton", screenGui)
toggleButton.Size = UDim2.new(0, 100, 0, 30)
toggleButton.Position = UDim2.new(0, 10, 1, -40)
toggleButton.Text = "Head Mod"
toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 16

-- Main Frame
local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 250, 0, 150)
frame.Position = UDim2.new(0, 20, 0.5, -75)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Visible = false
frame.Active = true
frame.Draggable = true

local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "Head Mod Settings"
title.TextColor3 = Color3.new(1, 1, 1)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20

local checkbox = Instance.new("TextButton", frame)
checkbox.Position = UDim2.new(0, 10, 0, 40)
checkbox.Size = UDim2.new(0, 100, 0, 30)
checkbox.Text = "Enable: OFF"
checkbox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
checkbox.TextColor3 = Color3.new(1, 1, 1)

local sizeSlider = Instance.new("TextBox", frame)
sizeSlider.Position = UDim2.new(0, 10, 0, 80)
sizeSlider.Size = UDim2.new(0, 100, 0, 25)
sizeSlider.Text = "Size: 1"
sizeSlider.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
sizeSlider.TextColor3 = Color3.new(1, 1, 1)

local transparencySlider = Instance.new("TextBox", frame)
transparencySlider.Position = UDim2.new(0, 130, 0, 80)
transparencySlider.Size = UDim2.new(0, 100, 0, 25)
transparencySlider.Text = "Trans: 0"
transparencySlider.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
transparencySlider.TextColor3 = Color3.new(1, 1, 1)

-- Logic Variables
local enabled = false
local headSize = 1
local headTransparency = 0

local R6_DEFAULT = Vector3.new(2, 1, 1)
local R15_DEFAULT = Vector3.new(1.198, 1.202, 1.198)

-- Apply or Reset Head
local function applyHeadMod(character)
	local head = character:FindFirstChild("Head")
	if not head or not head:IsA("BasePart") then return end

	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid then return end

	local isR15 = humanoid.RigType == Enum.HumanoidRigType.R15

	if enabled then
		if isR15 then
			local mesh = head:FindFirstChildWhichIsA("SpecialMesh")
			if mesh then
				mesh.Scale = R15_DEFAULT * headSize
			else
				head.Size = R15_DEFAULT * headSize
			end
		else
			head.Size = R6_DEFAULT * headSize
		end
		head.Transparency = headTransparency
	else
		if isR15 then
			local mesh = head:FindFirstChildWhichIsA("SpecialMesh")
			if mesh then
				mesh.Scale = R15_DEFAULT
			else
				head.Size = R15_DEFAULT
			end
		else
			head.Size = R6_DEFAULT
		end
		head.Transparency = 0
	end
end

-- Update All Players (Only alive)
local function updateAllPlayers()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character then
			local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
			if humanoid and humanoid.Health > 0 then
				applyHeadMod(player.Character)
			end
		end
	end
end

-- GUI Events
checkbox.MouseButton1Click:Connect(function()
	enabled = not enabled
	checkbox.Text = "Enable: " .. (enabled and "ON" or "OFF")
	updateAllPlayers()
end)

sizeSlider.FocusLost:Connect(function(enterPressed)
	if enterPressed then
		local num = tonumber(sizeSlider.Text:match("%d*%.?%d+"))
		if num then
			headSize = math.clamp(num, 0.1, 5)
			sizeSlider.Text = "Size: " .. headSize
			if enabled then updateAllPlayers() end
		else
			sizeSlider.Text = "Size: " .. headSize
		end
	end
end)

transparencySlider.FocusLost:Connect(function(enterPressed)
	if enterPressed then
		local num = tonumber(transparencySlider.Text:match("%d*%.?%d+"))
		if num then
			headTransparency = math.clamp(num, 0, 1)
			transparencySlider.Text = "Trans: " .. headTransparency
			if enabled then updateAllPlayers() end
		else
			transparencySlider.Text = "Trans: " .. headTransparency
		end
	end
end)

toggleButton.MouseButton1Click:Connect(function()
	frame.Visible = not frame.Visible
end)

-- Monitor Character + Reset on Death
local function setupCharacterMonitoring(player)
	player.CharacterAdded:Connect(function(char)
		local function onDeath()
			local head = char:FindFirstChild("Head")
			if head and head:IsA("BasePart") then
				local humanoid = char:FindFirstChildOfClass("Humanoid")
				if humanoid and humanoid.RigType == Enum.HumanoidRigType.R15 then
					local mesh = head:FindFirstChildWhichIsA("SpecialMesh")
					if mesh then
						mesh.Scale = R15_DEFAULT
					else
						head.Size = R15_DEFAULT
					end
				else
					head.Size = R6_DEFAULT
				end
				head.Transparency = 0
			end
		end

		local humanoid = char:WaitForChild("Humanoid", 3)
		if humanoid then
			humanoid.Died:Connect(onDeath)
		end

		if enabled then
			task.wait(1)
			applyHeadMod(char)
		end
	end)
end

-- Setup all players
for _, player in ipairs(Players:GetPlayers()) do
	if player ~= LocalPlayer then
		setupCharacterMonitoring(player)
	end
end

Players.PlayerAdded:Connect(function(player)
	if player ~= LocalPlayer then
		setupCharacterMonitoring(player)
	end
end)

-- Auto-refresh every 5 seconds
task.spawn(function()
	while true do
		task.wait(5)
		if enabled then
			updateAllPlayers()
		end
	end
end)

-- Keybinds
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.Insert then
		frame.Visible = not frame.Visible
	elseif input.KeyCode == Enum.KeyCode.Delete then
		enabled = not enabled
		checkbox.Text = "Enable: " .. (enabled and "ON" or "OFF")
		updateAllPlayers()
	end
end)
